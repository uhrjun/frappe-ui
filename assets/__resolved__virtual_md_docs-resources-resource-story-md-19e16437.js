const html = '<h1 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-hidden="true">#</a></h1>\n<p>Resource is a feature to manage async data fetching and mutations in your Vue\nfrontend. It will fetch, cache and keep data up-to-date from the server.</p>\n<h2 id="basic-example" tabindex="-1">Basic example <a class="header-anchor" href="#basic-example" aria-hidden="true">#</a></h2>\n<p>Any data that is fetched via a web request is called a resource in frappe-ui\nterminology. When you are dealing with async data, you are also dealing with\nloading states, error states, refetching etc. In the traditional way of fetching\ndata, you have to handle loading states, error states, and refetching yourself.</p>\n<pre><code class="language-js"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">js</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> data, loading, error</span></span>\n<span class="line"><span style="color: #FF7B72">try</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  data </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">await</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="color: #C9D1D9">)</span></span>\n<span class="line"><span style="color: #C9D1D9">} </span><span style="color: #FF7B72">catch</span><span style="color: #C9D1D9"> (e) {</span></span>\n<span class="line"><span style="color: #C9D1D9">  error </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> e</span></span>\n<span class="line"><span style="color: #C9D1D9">}</span></span>\n<span class="line"><span style="color: #8B949E">// rest of your code</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<p>The above example is still a very simplified version. You might also need a way\nto reload your data.</p>\n<p>When you create a resource using the <code>createResource</code> function, it will create a\nreactive object with properties like <code>data</code>, <code>loading</code>, <code>error</code>, <code>reload()</code> etc.</p>\n<p>The default request method is <code>POST</code>. This can be changed in the <code>options</code>\nobject.</p>\n<pre><code class="language-vue"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">vue</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post.reload()&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:loading</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post.loading&quot;</span><span style="color: #C9D1D9">&gt; Reload &lt;/</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;{{ post }}&lt;/</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">setup</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createResource } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;frappe-ui&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> post </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createResource</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<h2 id="options-api-example" tabindex="-1">Options API example <a class="header-anchor" href="#options-api-example" aria-hidden="true">#</a></h2>\n<p>Resources can also be used in options API style. You need to register the\n<code>resourcesPlugin</code> first.</p>\n<p><strong>main.js</strong></p>\n<pre><code class="language-js"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">js</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { resourcesPlugin } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;frappe-ui&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">app.</span><span style="color: #D2A8FF">use</span><span style="color: #C9D1D9">(resourcesPlugin)</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<p>In your <code>.vue</code> file, you can declare all your resources under the <code>resources</code>\nkey as functions. The actual resource object will be available on\n<code>this.$resources.[name]</code>. In the following example, <code>this.$resources.posts</code> is\nthe resource object.</p>\n<p><strong>Component.vue</strong></p>\n<pre><code class="language-vue"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">vue</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;{{ $resources.posts }}&lt;/</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">export</span><span style="color: #FFA657"> </span><span style="color: #FF7B72">default</span><span style="color: #FFA657"> {</span></span>\n<span class="line"><span style="color: #FFA657">  </span><span style="color: #C9D1D9">resources: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">posts</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        url: </span><span style="color: #A5D6FF">&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #8B949E">// option to call .fetch() the first time automatically</span></span>\n<span class="line"><span style="color: #C9D1D9">        auto: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span><span style="color: #FFA657">,</span></span>\n<span class="line"><span style="color: #FFA657">}</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<h2 id="caching-example" tabindex="-1">Caching example <a class="header-anchor" href="#caching-example" aria-hidden="true">#</a></h2>\n<p>Caching is a first-class feature in resources. To cache responses, just define a\n<code>cache</code> property in options with a unique global key. Now, the response will\ncached in memory as well as in IndexedDB. If you define another resource in a\ndifferent part of your application with the same cache key, it will reuse the\ncached one.</p>\n<pre><code class="language-vue"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">vue</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post.reload()&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:loading</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post.loading&quot;</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">    {{ post.fetched ? &#39;Reload&#39; : &#39;Fetch data&#39; }}</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;/</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;{{ post.data }}&lt;/</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">setup</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createResource } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;frappe-ui&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> post </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createResource</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  cache: </span><span style="color: #A5D6FF">&#39;posts&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<h2 id="list-of-options-and-api" tabindex="-1">List of Options and API <a class="header-anchor" href="#list-of-options-and-api" aria-hidden="true">#</a></h2>\n<p>Here is the list of all options and APIs that are available on a resource.</p>\n<h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h3>\n<pre><code class="language-js"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">js</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> post </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createResource</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// partial rest api routes</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;/api/posts/1&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// or full urls</span></span>\n<span class="line"><span style="color: #C9D1D9">    url: </span><span style="color: #A5D6FF">&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// http method: GET, POST, PUT, DELETE</span></span>\n<span class="line"><span style="color: #C9D1D9">    method: </span><span style="color: #A5D6FF">&#39;GET&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// parameters</span></span>\n<span class="line"><span style="color: #C9D1D9">    params: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      id: </span><span style="color: #79C0FF">1</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// generate params from function</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">makeParams</span><span style="color: #C9D1D9">() {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">        id: </span><span style="color: #79C0FF">1</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// debounce request every 500ms</span></span>\n<span class="line"><span style="color: #C9D1D9">    debounce: </span><span style="color: #79C0FF">500</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// initial data</span></span>\n<span class="line"><span style="color: #C9D1D9">    initialData: []</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// make the first request automatically</span></span>\n<span class="line"><span style="color: #C9D1D9">    auto: </span><span style="color: #79C0FF">true</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// cache key to cache the resource</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// can be a string</span></span>\n<span class="line"><span style="color: #C9D1D9">    cache: </span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// or an array that can be serialized</span></span>\n<span class="line"><span style="color: #C9D1D9">    cache: [</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, </span><span style="color: #A5D6FF">&#39;1&#39;</span><span style="color: #C9D1D9">],</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// you can also pass reactive variable here</span></span>\n<span class="line"><span style="color: #C9D1D9">    cache: [</span><span style="color: #A5D6FF">&#39;post&#39;</span><span style="color: #C9D1D9">, postId]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// events</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// before making the request</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">beforeSubmit</span><span style="color: #C9D1D9">(params) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// validate parameters before making request</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">validate</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">params</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        </span><span style="color: #FF7B72">if</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">!</span><span style="color: #C9D1D9">params.id) {</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #8B949E">// return a string message to throw an error</span></span>\n<span class="line"><span style="color: #C9D1D9">            </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;id is required&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">        }</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// error can occur from failed request and validate function</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">onError</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">error</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// on successful response</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">onSuccess</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #8B949E">// transform data before setting it</span></span>\n<span class="line"><span style="color: #C9D1D9">    </span><span style="color: #D2A8FF">transform</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9">) {</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">for</span><span style="color: #C9D1D9"> (</span><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> d </span><span style="color: #FF7B72">of</span><span style="color: #C9D1D9"> data) {</span></span>\n<span class="line"><span style="color: #C9D1D9">        d.open </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">false</span></span>\n<span class="line"><span style="color: #C9D1D9">      }</span></span>\n<span class="line"><span style="color: #C9D1D9">      </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h3>\n<pre><code class="language-js"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">js</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> post </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createResource</span><span style="color: #C9D1D9">({</span><span style="color: #FF7B72">...</span><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">post.data </span><span style="color: #8B949E">// data returned from request</span></span>\n<span class="line"><span style="color: #C9D1D9">post.loading </span><span style="color: #8B949E">// true when data is being fetched</span></span>\n<span class="line"><span style="color: #C9D1D9">post.error </span><span style="color: #8B949E">// error that occurred from making the request or from validate function</span></span>\n<span class="line"><span style="color: #C9D1D9">post.promise </span><span style="color: #8B949E">// promise object of the request, can be awaited</span></span>\n<span class="line"><span style="color: #C9D1D9">post.params </span><span style="color: #8B949E">// params that were sent for making the request, if using makeParams, the return value is set here</span></span>\n<span class="line"><span style="color: #C9D1D9">post.fetched </span><span style="color: #8B949E">// true when data has been fetched once, stays true after that</span></span>\n<span class="line"><span style="color: #C9D1D9">post.previousData </span><span style="color: #8B949E">// when you call .reload(), previousData is set to current data, and then data is set to new returned data</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">() </span><span style="color: #8B949E">// make the web request (fetch call)</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">reload</span><span style="color: #C9D1D9">() </span><span style="color: #8B949E">// alias to fetch</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">submit</span><span style="color: #C9D1D9">() </span><span style="color: #8B949E">// alias to fetch</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// you can also pass parameters while calling submit</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">submit</span><span style="color: #C9D1D9">({ id: </span><span style="color: #79C0FF">2</span><span style="color: #C9D1D9"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// reset the state of this resource as a newly created one</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">reset</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// update url and params</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">update</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">&#39;/api/users&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  params: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    id: </span><span style="color: #79C0FF">2</span></span>\n<span class="line"><span style="color: #C9D1D9">  }</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #8B949E">// override data manually</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">setData</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  id: </span><span style="color: #79C0FF">1</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  title: </span><span style="color: #A5D6FF">&#39;test&#39;</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #8B949E">// modify existing data</span></span>\n<span class="line"><span style="color: #C9D1D9">post.</span><span style="color: #D2A8FF">setData</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">data</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> {</span></span>\n<span class="line"><span style="color: #C9D1D9">  </span><span style="color: #FF7B72">return</span><span style="color: #C9D1D9"> data.</span><span style="color: #D2A8FF">filter</span><span style="color: #C9D1D9">(</span><span style="color: #FFA657">d</span><span style="color: #C9D1D9"> </span><span style="color: #FF7B72">=&gt;</span><span style="color: #C9D1D9"> d.open)</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<h2 id="frappe-resource" tabindex="-1">Frappe Resource <a class="header-anchor" href="#frappe-resource" aria-hidden="true">#</a></h2>\n<p>Fetching data from a Frappe backend is no different from any other REST API\nservice.</p>\n<pre><code class="language-vue"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">vue</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todos.reload()&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:loading</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;todos.loading&quot;</span><span style="color: #C9D1D9">&gt; Reload &lt;/</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;{{ todos }}&lt;/</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">setup</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createResource } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;frappe-ui&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> todos </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createResource</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">  url: </span><span style="color: #A5D6FF">&#39;/api/method/frappe.client.get_list&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  params: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    doctype: </span><span style="color: #A5D6FF">&#39;ToDo&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    filters: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      allocated_to: </span><span style="color: #A5D6FF">&#39;faris@frappe.io&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">todos.</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<p>But the response format by Frappe Framework requires some parsing to be done to\nextract data and errors. Since <code>frappe-ui</code> is built primarily for Frappe backend\napps, we can make it understand Frappe responses.</p>\n<p>By default, resources use the <code>request</code> function exported from <code>frappe-ui</code> which\nis a generic Fetch API wrapper. There is another function <code>frappeRequest</code> which\nis a wrapper for Frappe REST API calls. To make resources use it, you have to do\nthe following:</p>\n<p><strong>main.js</strong></p>\n<pre><code class="language-js"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">js</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { setConfig, frappeRequest } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;frappe-ui&#39;</span></span>\n<span class="line"><span style="color: #D2A8FF">setConfig</span><span style="color: #C9D1D9">(</span><span style="color: #A5D6FF">&#39;resourceFetcher&#39;</span><span style="color: #C9D1D9">, frappeRequest)</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n<p>Now, resources will use <code>frappeRequest</code> for making the web requests. You can\nalso drop the <code>/api/method</code> part. The returned response will now set the data\nfrom <code>message</code> key and error from <code>exc</code>.</p>\n<pre><code class="language-vue"><div class="htw-relative htw-not-prose __histoire-code"><div class="htw-absolute htw-top-0 htw-right-0 htw-text-xs htw-text-white/40">vue</div><pre class="shiki github-dark" style="background-color: #0d1117"><code><span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">@click</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post.reload()&quot;</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">:loading</span><span style="color: #C9D1D9">=</span><span style="color: #A5D6FF">&quot;post.loading&quot;</span><span style="color: #C9D1D9">&gt; Reload &lt;/</span><span style="color: #7EE787">Button</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">  &lt;</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;{{ post }}&lt;/</span><span style="color: #7EE787">pre</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">template</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #C9D1D9">&lt;</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9"> </span><span style="color: #79C0FF">setup</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"><span style="color: #FF7B72">import</span><span style="color: #C9D1D9"> { createResource } </span><span style="color: #FF7B72">from</span><span style="color: #C9D1D9"> </span><span style="color: #A5D6FF">&#39;frappe-ui&#39;</span></span>\n<span class="line"><span style="color: #FF7B72">let</span><span style="color: #C9D1D9"> todos </span><span style="color: #FF7B72">=</span><span style="color: #C9D1D9"> </span><span style="color: #D2A8FF">createResource</span><span style="color: #C9D1D9">({</span></span>\n<span class="line"><span style="color: #C9D1D9">- url: </span><span style="color: #A5D6FF">&#39;/api/method/frappe.client.get_list&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">+ url: </span><span style="color: #A5D6FF">&#39;frappe.client.get_list&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">  params: {</span></span>\n<span class="line"><span style="color: #C9D1D9">    doctype: </span><span style="color: #A5D6FF">&#39;ToDo&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    filters: {</span></span>\n<span class="line"><span style="color: #C9D1D9">      allocated_to: </span><span style="color: #A5D6FF">&#39;faris@frappe.io&#39;</span><span style="color: #C9D1D9">,</span></span>\n<span class="line"><span style="color: #C9D1D9">    },</span></span>\n<span class="line"><span style="color: #C9D1D9">  },</span></span>\n<span class="line"><span style="color: #C9D1D9">})</span></span>\n<span class="line"><span style="color: #C9D1D9">todos.</span><span style="color: #D2A8FF">fetch</span><span style="color: #C9D1D9">()</span></span>\n<span class="line"><span style="color: #C9D1D9">&lt;/</span><span style="color: #7EE787">script</span><span style="color: #C9D1D9">&gt;</span></span>\n<span class="line"></span></code></pre></div></code></pre>\n';
const frontmatter = {};
const relativePath = "docs/resources/Resource.story.md";
export {
  frontmatter,
  html,
  relativePath
};
